// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VidsyClient is the client API for Vidsy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VidsyClient interface {
	Edit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type vidsyClient struct {
	cc grpc.ClientConnInterface
}

func NewVidsyClient(cc grpc.ClientConnInterface) VidsyClient {
	return &vidsyClient{cc}
}

func (c *vidsyClient) Edit(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/vidsy.Vidsy/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VidsyServer is the server API for Vidsy service.
// All implementations must embed UnimplementedVidsyServer
// for forward compatibility
type VidsyServer interface {
	Edit(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedVidsyServer()
}

// UnimplementedVidsyServer must be embedded to have forward compatible implementations.
type UnimplementedVidsyServer struct {
}

func (UnimplementedVidsyServer) Edit(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedVidsyServer) mustEmbedUnimplementedVidsyServer() {}

// UnsafeVidsyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VidsyServer will
// result in compilation errors.
type UnsafeVidsyServer interface {
	mustEmbedUnimplementedVidsyServer()
}

func RegisterVidsyServer(s grpc.ServiceRegistrar, srv VidsyServer) {
	s.RegisterService(&Vidsy_ServiceDesc, srv)
}

func _Vidsy_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VidsyServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vidsy.Vidsy/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VidsyServer).Edit(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Vidsy_ServiceDesc is the grpc.ServiceDesc for Vidsy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vidsy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vidsy.Vidsy",
	HandlerType: (*VidsyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Edit",
			Handler:    _Vidsy_Edit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vidsy.proto",
}
